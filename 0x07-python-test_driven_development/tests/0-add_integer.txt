"""

	test_0-add_integer

"""
Using ``add_integer``
___________________________________

	>>> __import__('0-add_integer').__doc__ != None
	True

	>>> add_integer = __import__('0-add_integer').add_integer

	>>> add_integer.__doc__ != None
    	True

adding with integers:
	>>> add_integer(3, 5)
	8
	>>> add_integer(100, 7)
	107
	>>> add_integer(0, 90)
	90

adding with negative numbers:
	>> add_integer(-3, 7)
	4
	>>> add_integer(-9,-10)
	-19
	>>> add_integer(-3,-59)
	-62

adding with float cases:
	>> add_integer(2.7, 9)
	11
	>>> add_integer(-100.9,-5000)
	-5100

adding edge cases:
 adding strings:
	>>> add_integer("dd", 100)
	Traceback (most recent call last):
    	...
	TypeError: a must be an integer

	>>> add_integer(100, "bb")
	Traceback (most recent call last):
    	...
	TypeError: b must be an integer

 adding empty:
	>>> add_integer()
    	Traceback (most recent call last):
    	...
    	TypeError: add_integer() missing 1 required positional argument: 'a'

 adding with None:
	>>> add_integer(3, None)
    	Traceback (most recent call last):
    	...
	TypeError: b must be an integer

	>>> add_integer(None)
    	Traceback (most recent call last):
    	...
	TypeError: a must be an integer

 adding with more of two arguments:
	>>> add_integer(3, 5, 7)
    	Traceback (most recent call last):
    	...
	TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

 adding infinit float:
	>>> add_integer(float('inf'), 3)
    	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

 adding tuple:
 	>>> add_integer((2,4), 5)
    	Traceback (most recent call last):
	...
	TypeError: a must be an integer
