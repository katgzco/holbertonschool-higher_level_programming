"""

	testing 3-say_my_name

"""
Using ``say_my_name``
___________________________________

	>>> __import__('3-say_my_name').__doc__ != None
	True

	>>> say_my_name = __import__('3-say_my_name').say_my_name

	>>> say_my_name.__doc__ != None
    	True

say_my_name with integers:
	>>> say_my_name("walter", "white")
	My name is walter white

	>>> say_my_name("Bob")
	My name is Bob 

	>>> say_my_name(" ","lenon")
	My name is   lenon

Test edge cases:

Tets with integers:
	>>> say_my_name("", 444)
	Traceback (most recent call last):
    	...
	TypeError: last_name must be a string

	>>> say_my_name(444, "")
	Traceback (most recent call last):
    	...
	TypeError: firts_name must be a string

Test empty:
	say_my_name()
	Traceback (most recent call last):
	...
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'

	say_my_name(None)
	Traceback (most recent call last):
	...
	TypeError: firts_name must be a string

Test with tree arguments
	>>> say_my_name("Bob", "Peter", "Julian")
	Traceback (most recent call last):
	...
	TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given
